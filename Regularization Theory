{
      "cell_type": "markdown",
      "metadata": {
        "id": "TWWU_gOSLEEv"
      },
      "source": [
        "# Question 1: MLOps (10 pts)\n",
        "Read this [article](https://towardsdatascience.com/what-is-mlops-everything-you-must-know-to-get-started-523f2d0b8bd8) \"What is MLOps — Everything You Must Know to Get Started\", which gives a quick walkthrough of the machine learning development lifecycle and explains how MLOps come into play, or watch this [video](https://www.youtube.com/watch?v=06-AZXmwHjo) which you may find interesting.\n",
        "\n",
        "1. (**4 pts**) Use your own words to describe what MLOps is, and what challenges MLOps address. Limit your answer to one paragraph.\n",
        "\n",
        "2. (**6 pts**) Describe what the main phases in MLOps are. Your answer should be 2-3 paragraphs.\n",
        "\n",
        "\n",
        "## Answer:\n",
        "\n",
        "1. Essentially, an MLOps team comprises an ecosystem of various stakeholders who ensure continuous, consistent, and streamlined delivery of high-performing models in a production setting. Running different experiments and models to solve a business problem (data science) forms a subset of the entire MLOps process. It tackles multiple other problems usually faced while making a model more robust. Case in point, verifying data consistency, ensuring the quality of data is up-to-mark, automation of ML pipelines to reduce the turnaround time, deployment, optimization and maintenance of data and code, etc. Additionally, at an overall level, MLOps keeps up the model performance while ensuring AI governance in a setting with continuously evolving business objectives. In such a setting, there's also a risk associated with the models drifting apart from their original purpose, especially given the lack of interpretability associated with complex models such as neural nets. This black-box nature may also lead to communication gaps between business and technical stakeholders and might lead to project failures.\n",
        "\n",
        "\n",
        "2. MLOps deals with end-to-end streamlining the ML-system from problem formulation to maintenance of the deployed productized solution. Key phases in this process are:\n",
        "- Formulating the business question such that business objectives are being met. Often this phase would have certain defined performance measures to be targeted and certain constraints such as budget to be considered.\n",
        "- Designing the architecture while ensuring data credibility, compliance, accessibility, resources available, etc. Taking into account these inputs, we’d be able to have a sense of the data needed and the types of models needed to build to solve the business problem. Having the correct data often is the most important driver of predictive power that a model may offer.\n",
        "- Data processing steps such as cleaning, imputing missing values, outlier treatment, handling class imbalance, etc. and feature engineering such as log transformations to be done while taking into consideration the right combination of cloud services and architecture needed for the system to be performant and cost-effective, especially when dealing with a huge volume of data.\n",
        "- Iterating through different models to narrow down on the best-suited model in terms of being predictable, explainable, and reproducible. When dealing with Big data, considerations in terms of model scalability come into play as well.\n",
        "- Automating the entire pipeline from data processing, loading dependencies to the extraction of model outputs. Often, this step would ensure, code incorporates error handling, storing of metadata for debugging, data validation is performed, etc.\n",
        "- Static or Dynamic model deployment to the production system. Based on the use-case, deployment could be done on a server, in a container such as Docker, or could be serverless. This step performs load testing, data quality checks, explainability checks, model accuracy revalidation to ensure the system is robust.\n",
        "- Post deployment, it’s equally important to keep tabs on the model performance and quality of model insights. This phase necessitates up-to-mark performance with evolving data, consistent removal of biases, model tuning, etc. so that all stakeholders can derive value from the system.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wusA9L1LmUMH"
      },
      "source": [
        "# Question 2: Applications of Machine Learning (5 pts)\n",
        "Read this [article](https://builtin.com/data-science/data-science-applications-examples) \"17 Data Science Applications & Examples\" and pick one of the data science systems used by various organizations according to this blog. \n",
        "\n",
        "For this system you have chosen, answer the following questions. Please limit your answer to one paragraph:\n",
        "\n",
        "1. What kind of machine learning problem is involved (e.g. classification, regression, clustering, outlier detection,...) in this system?\n",
        "2. Speculate on what kind of data may be needed and how the results can be useful to the organization.\n",
        "3. What do you think are the ethical implications of using machine learning in a domain like this?\n",
        "\n",
        "## Answer:\n",
        "\n",
        "1. In the Google : Machine learning for Metastasis section we talk about Google's tool LYNA (LYmph Node Assistant) that helps predict whether breast cancer tumors have metastasized to nearby lymph nodes - a problem difficult to solve by visual analysis. The problem essentially is a classification problem necessitating a model to predict whether a given patient’s data is indicative of a tumor being metastasized versus not.\n",
        "\n",
        "2. The data that can help the classification could be tabular data comprising lab results of biomarkers associated with biomarkers, text data encompassing entire patient history, drug interventions, patient comorbidities, and adverse effects in the patient journey as well as image data from radiology scans of the affected area. Most of the time, if the scans are fully clear or show significant metastasis, the physicians would not have any issues in prognosis and deciding the next steps in patient care. However, in instances of scans being in the grey areas where very minute details are of paramount importance, tools such as LYCA can assist physicians in making a much more informed prognosis. Given the ML model would offer the probability of metastasis, the physician would also have some quantitative indication of the uncertainty associated with his prognosis.\n",
        "\n",
        "3. There are varied ethical implications if such a system is implemented. First, the model would only be as good as the data it is trained on. If the training data labeling isn’t close to the true classification, the model would be adding a bias to its predictions. This bias would end up increasing the Type I and Type II errors of the system. In cases of Type I error or False positives, a physician may start a more severe drug therapy than the patient needs. In cases of Type II error or False negatives, we’d risk the patient not receiving the required dosage/type of interventions leading to disease deteriorating further. \n",
        "Additionally, given patient data is so sensitive and protected by laws such as HIPAA, access to information such as deidentified lab reports of patients would raise privacy concerns.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2w8za9lLmVO7"
      },
      "source": [
        "# Question 3: Simpson's Paradox (10 pts)\n",
        "A data scientist should be careful about drawing unwarranted conclusions about any data that is presented. One of the 'gotchas' that can happen even in apparently very simple tabular summaries, is called Simpson's paradox.\n",
        "\n",
        "Read this [article](https://www.covid-datascience.com/post/israeli-data-how-can-efficacy-vs-severe-disease-be-strong-when-60-of-hospitalized-are-vaccinated), which explains why the computed efficacy of the Pfizer vaccine is misleadingly low (67.5%) when you lump all people together, but once you stratify people by age (which is the right thing to do), you get much higher efficacy numbers.\n",
        "\n",
        "1.(**5 pts**) Explain in your own words what Simpson's paradox is, and how this 'paradox' can happen in real data.\n",
        "\n",
        "2.(**5 pts**) Find and mention another example of Simpson's paradox (but not any of the 3 examples given in the Wikipedia entry for 'Simpson's paradox'), state why the paradox appeared in your chosen example. Also give a reference (URL) to your source for the chosen example.\n",
        "\n",
        "## Answer:\n",
        "\n",
        "1. Simpson’s process is an observation where an association between two variables changes or even reverses when the same association is evaluated for a sub-population. This paradox primarily happens when we fail to consider any confounding variable that has an impact on the associations at the sub-population level. The paradox attacks the assumption that statistical associations are immutable. These associations between two variables can change depending upon the variables being controlled for. This also highlights why causal inferences from associations are not advised since the relationship between two variables might reverse based on uncontrolled or unobserved variables. Case in point, data for covid vaccine efficacy in Israel shows 67.5% efficacy at an overall level. When accounted for age as the confounding variable stratified as less or more than 50, the efficacy becomes 91.8% and 85.2% respectively. The intuition of this paradox can be provided via scatterplot of two variables in play having two strata of say, negative correlation individually, whereas overall data scatterplot shows a positive correlation\n",
        "\n",
        "2. Similar to vaccine efficacy in Covid, we can also look into mortality associated with covid cases. Consider the numbers from the UCLA study presented at the following URL.\n",
        "http://causality.cs.ucla.edu/blog/index.php/2020/07/06/race-covid-mortality-and-simpsons-paradox-by-dana-mackenzie .\n",
        "The study compares mortality due to Covid by race and at an overall level, it seems that the mortality is higher for the White, non-Hispanic race which is contradictory to what we’ve been listening to in media. The confounding variable is age again, which is one of the highest risk factors in death due to Covid. Stratifying for age we see, the white population has a lower mortality rate for almost all age groups. The key driver for this paradox in this case is the imbalance in the proportion of older whites to older non-whites. Since at a population level, number of older whites is higher, in absence of any age-related information it seems that the risk of white population is higher. As soon as the confounding variable is accounted for, we see the risk becomes higher in the black and hispanic populations.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gth0D8jiMBSe"
      },
      "source": [
        "# Question 4: Ridge and Lasso Regression (30 pts)\n",
        "\n",
        "Download the dataset **Admission.csv** from Canvas and use the following codes to import the Admission dataset in Python. \n",
        "\n",
        "There are 7 features in the dataset:\n",
        "\n",
        "1. GRE score\n",
        "2. TOEFL score\n",
        "3. University Rating\n",
        "4. SOP(Statement of Purpose)\n",
        "5. LOR(Letter of Recommendation)\n",
        "6. CGPA\n",
        "7. Research\n",
        "\n",
        "And the target is **Chance of Admission**."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "QFazlpLgGpAa",
        "outputId": "336bb8ee-496e-43cf-945a-3a4c91b32fff"
      },
      "source": [
        "# Only use this code block if you are using Google Colab.\n",
        "# If you are using Jupyter Notebook, please ignore this code block. You can directly upload the file to your Jupyter Notebook file systems.\n",
        "from google.colab import files\n",
        "\n",
        "## It will prompt you to select a local file. Click on “Choose Files” then select and upload the file. \n",
        "## Wait for the file to be 100% uploaded. You should see the name of the file once Colab has uploaded it.\n",
        "uploaded = files.upload()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-6e489e96-14e4-4e2f-af06-688f85b4aaa9\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-6e489e96-14e4-4e2f-af06-688f85b4aaa9\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Admission.csv to Admission (1).csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xsPaOOehGuU6"
      },
      "source": [
        "# Codes below will work for both Google Colab and Jupyter Notebook.\n",
        "%matplotlib inline\n",
        "import random\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import scale, StandardScaler\n",
        "\n",
        "from sklearn import linear_model\n",
        "from sklearn.linear_model import LinearRegression, Ridge, RidgeCV, Lasso, LassoCV, ElasticNet\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, fbeta_score, make_scorer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.model_selection import GridSearchCV, KFold\n",
        "\n",
        "pd.set_option('display.width', 500)\n",
        "pd.set_option('display.max_columns', 100)\n",
        "pd.set_option('display.notebook_repr_html', True)\n",
        "import seaborn as sns\n",
        "sns.set_style(\"whitegrid\")\n",
        "sns.set_context(\"poster\")\n",
        "\n",
        "## Load the dataset into pandas DataFrame\n",
        "df = pd.read_csv('Admission.csv', index_col=0)\n",
        "df = df.replace([np.inf, -np.inf], np.nan) # \n",
        "df = df.fillna(0) # Replace all the NaN values with 0"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PmMz72U6Gv-z",
        "outputId": "821e9e4c-3b10-4211-b6d2-db7a5d26271f"
      },
      "source": [
        "df.columns # Show you all the columns in this file"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['GRE_Score', 'TOEFL_Score', 'University_Rating', 'SOP', 'LOR ', 'CGPA', 'Research', 'Chance_of_Admit'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "CyZN-yFfGxlt",
        "outputId": "0801c9bd-3037-4e92-fcd7-f9579778d8c2"
      },
      "source": [
        "df.head() # Show you the first 5 rows in this file"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>GRE_Score</th>\n",
              "      <th>TOEFL_Score</th>\n",
              "      <th>University_Rating</th>\n",
              "      <th>SOP</th>\n",
              "      <th>LOR</th>\n",
              "      <th>CGPA</th>\n",
              "      <th>Research</th>\n",
              "      <th>Chance_of_Admit</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Serial No.</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>337</td>\n",
              "      <td>118</td>\n",
              "      <td>4</td>\n",
              "      <td>4.5</td>\n",
              "      <td>4.5</td>\n",
              "      <td>9.65</td>\n",
              "      <td>1</td>\n",
              "      <td>0.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>324</td>\n",
              "      <td>107</td>\n",
              "      <td>4</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.5</td>\n",
              "      <td>8.87</td>\n",
              "      <td>1</td>\n",
              "      <td>0.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>316</td>\n",
              "      <td>104</td>\n",
              "      <td>3</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>8.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0.72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>322</td>\n",
              "      <td>110</td>\n",
              "      <td>3</td>\n",
              "      <td>3.5</td>\n",
              "      <td>2.5</td>\n",
              "      <td>8.67</td>\n",
              "      <td>1</td>\n",
              "      <td>0.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>314</td>\n",
              "      <td>103</td>\n",
              "      <td>2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.21</td>\n",
              "      <td>0</td>\n",
              "      <td>0.65</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            GRE_Score  TOEFL_Score  University_Rating  SOP  LOR   CGPA  Research  Chance_of_Admit\n",
              "Serial No.                                                                                       \n",
              "1                 337          118                  4  4.5   4.5  9.65         1             0.92\n",
              "2                 324          107                  4  4.0   4.5  8.87         1             0.76\n",
              "3                 316          104                  3  3.0   3.5  8.00         1             0.72\n",
              "4                 322          110                  3  3.5   2.5  8.67         1             0.80\n",
              "5                 314          103                  2  2.0   3.0  8.21         0             0.65"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uj2V8ocRRcRf"
      },
      "source": [
        "1)(2 pts) Split the data into a training set(75% of data) and a test set(25% of data), using the train_test_split function with random_state = 50. Then scale the data (not including target) so that each of the independent variables would have zero mean and unit variance. You can use the sklearn.preprocessing.scale function for this. Print the first 5 rows of the training set after scaling."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pdOe0bLIReSo"
      },
      "source": [
        "y = df['Chance_of_Admit'] # The column named Chance_of_Admit is used as the target, and we store it in y\n",
        "X = df.drop(['Chance_of_Admit'], axis=1) # We keep the remaining columns as the features, and store them in x\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75, random_state = 50)\n",
        "\n",
        "#Using standard scaler to avoid leakage of train to test while maintaining test set mean and variance same as on train\n",
        "sc = StandardScaler()\n",
        "X_scaled = sc.fit_transform(X_train)\n",
        "X_test_scaled = sc.transform (X_test)"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S6wKR-UsTnxB",
        "outputId": "6e1ea15f-4658-4c80-911c-f844baa1e9cd"
      },
      "source": [
        "#First 5 rows of the array generated from scaled dataframe\n",
        "X_scaled[0:5]"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.52725374,  2.0917706 ,  1.61594354,  0.63150829,  1.72829095,\n",
              "         2.11370277,  0.90453403],\n",
              "       [ 0.74180896,  0.46308859, -0.9310778 , -0.35266047, -1.04140609,\n",
              "         0.29488827,  0.90453403],\n",
              "       [ 0.56726568,  0.13735218,  1.61594354,  0.63150829,  0.62041214,\n",
              "         0.26211684,  0.90453403],\n",
              "       [-0.39272239, -0.51412062, -0.08207069,  0.13942391,  0.62041214,\n",
              "        -0.80295471, -1.1055416 ],\n",
              "       [ 0.47999403,  0.78882499,  0.76693642,  1.12359267,  1.17435154,\n",
              "         1.11417408,  0.90453403]])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mQukzYigUeIZ"
      },
      "source": [
        "2)(5 pts) Use sklearn.linear_model.Lasso and sklearn.linear_model.Ridge classes to do a 5-fold cross validation using sklearn's KFold. For the sweep of the regularization parameter, we will look at a grid of values ranging from α=10^10 to α=10^−6. In Python, you can consider this range of values as follows: alpha = 10**numpy.linspace(6,-6,100) so that you can generate 100 uniform values between -6 to 6 as power series.\n",
        "\n",
        "Fit the 2 regression models with scaled data and report the best chosen α based on cross validation as well as the corresponding scoring metric. The cross validation should happen on your training data using MSE as the scoring metric."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3wez8FY7UiNS",
        "outputId": "22eb60a4-8a9b-4c7b-8d74-7bf6e60a4cfe"
      },
      "source": [
        "#Generate alphas\n",
        "alphas = 10**np.linspace(10,-6,100)\n",
        "\n",
        "#Sample alpha values\n",
        "alphas[[10,30,50,70,90]]"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2.42012826e+08, 1.41747416e+05, 8.30217568e+01, 4.86260158e-02,\n",
              "       2.84803587e-05])"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FuzZAKVIUi5a"
      },
      "source": [
        "#Generalized approach\n",
        "\n",
        "# steps_L1 = [('model', Lasso())]\n",
        "# steps_L2 = [('model', Ridge())]\n",
        "# parameters = [ {'model__alpha': alphas } ]\n",
        "\n",
        "# lasso_pipe = Pipeline(steps_L1)\n",
        "# ridge_pipe = Pipeline(steps_L2)\n",
        "\n",
        "# scoring_func = make_scorer(mean_squared_error)\n",
        "# grid_searchL1 = GridSearchCV(estimator = lasso_pipe, \n",
        "#                            param_grid = parameters,\n",
        "#                            scoring = scoring_func,\n",
        "#                            cv = 5,\n",
        "#                            n_jobs = -1)\n",
        "# grid_searchL2 = GridSearchCV(estimator = ridge_pipe, \n",
        "#                            param_grid = parameters,\n",
        "#                            scoring = scoring_func,\n",
        "#                            cv = 5,\n",
        "#                            n_jobs = -1)\n",
        "# grid_searchL1 = grid_searchL1.fit(X_scaled, y_train)\n",
        "# grid_searchL2 = grid_searchL2.fit(X_scaled, y_train)"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VDhi2FmQ6jMg"
      },
      "source": [
        "# Set number of cross-validation folds and initialize lists to store error metrics and coefficients\n",
        "k = 5\n",
        "#Generate K folds\n",
        "kf = KFold(n_splits=k)\n",
        "#Initialize mepty lists to store outputs\n",
        "MSE_Err_list_l1 = []\n",
        "MSE_Err_list_l2 = []\n",
        "coef_lasso = []\n",
        "coef_ridge = []\n",
        "\n",
        "#Loop over all alphas\n",
        "for i in range(len(alphas)):\n",
        "  \n",
        "  #Initialize risge and lasso\n",
        "  l1 = Lasso(alpha=alphas[i])\n",
        "  l2 = Ridge(alpha = alphas[i])\n",
        "\n",
        "  #Get Folds from kfold\n",
        "  for train_ix, val_ix in kf.split(X_scaled):\n",
        "    #Array to list for subsetting dataframes\n",
        "    train_ix = train_ix.tolist()\n",
        "    val_ix = val_ix.tolist()\n",
        "    #Fit scaled values on lasso\n",
        "    l1.fit(X_scaled[train_ix],np.array(y_train)[train_ix])\n",
        "    pred = l1.predict(X_scaled[val_ix])\n",
        "    MSE = mean_squared_error(np.array(y_train)[val_ix],pred)\n",
        "    MSE_Err_list_l1.append(MSE)\n",
        "\n",
        "    #Fit scaled values on ridge\n",
        "    l2.fit(X_scaled[train_ix],np.array(y_train)[train_ix])\n",
        "    pred = l2.predict(X_scaled[val_ix])\n",
        "    MSE = mean_squared_error(np.array(y_train)[val_ix],pred)\n",
        "    MSE_Err_list_l2.append(MSE)\n",
        "\n",
        "    #Extract coefficients\n",
        "    coef_lasso = coef_lasso + [list(l1.coef_)]\n",
        "    coef_ridge = coef_ridge + [list(l2.coef_)]\n",
        "\n"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "Yy-MWRB7d4Mv",
        "outputId": "e5bff75c-6804-468f-f62a-fe829f94033b"
      },
      "source": [
        "#Alpha from each fold with MSE from lasso and ridge\n",
        "Err_df = pd.DataFrame([list(np.repeat(alphas,5)),MSE_Err_list_l1,MSE_Err_list_l2]).rename({0:'Alpha',1:'Lasso',2:'Ridge'}).T\n",
        "Err_df[0:5]"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Alpha</th>\n",
              "      <th>Lasso</th>\n",
              "      <th>Ridge</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.000000e+10</td>\n",
              "      <td>0.018394</td>\n",
              "      <td>0.018394</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.000000e+10</td>\n",
              "      <td>0.021690</td>\n",
              "      <td>0.021690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.000000e+10</td>\n",
              "      <td>0.021924</td>\n",
              "      <td>0.021924</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.000000e+10</td>\n",
              "      <td>0.023133</td>\n",
              "      <td>0.023133</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.000000e+10</td>\n",
              "      <td>0.022252</td>\n",
              "      <td>0.022252</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          Alpha     Lasso     Ridge\n",
              "0  1.000000e+10  0.018394  0.018394\n",
              "1  1.000000e+10  0.021690  0.021690\n",
              "2  1.000000e+10  0.021924  0.021924\n",
              "3  1.000000e+10  0.023133  0.023133\n",
              "4  1.000000e+10  0.022252  0.022252"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Un953Xmd4PT",
        "outputId": "18fd71a3-0432-4f4e-ba29-8fb41706bc9d"
      },
      "source": [
        "#Alpha for minimum mean (from 5 folds) lasso MSE\n",
        "lasso_alpha_best = Err_df.groupby(['Alpha'])['Lasso'].mean().idxmin()\n",
        "lasso_alpha_best"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0011768119524349942"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OGBiRM-olnOK",
        "outputId": "5af5e44a-cdb5-483c-86c2-27912ab57455"
      },
      "source": [
        "#Alpha for minimum mean (from 5 folds) Ridge MSE\n",
        "ridge_alpha_best = Err_df.groupby(['Alpha'])['Ridge'].mean().idxmin()\n",
        "ridge_alpha_best"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.229242874389499"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rM5n5Pt__gTM",
        "outputId": "927bb6db-5e20-4a10-96bb-8b973c1d5fa4"
      },
      "source": [
        "#Lowest MSE - Lasso\n",
        "MSE_lasso = Err_df[Err_df['Alpha']==lasso_alpha_best]['Lasso'].mean()\n",
        "MSE_lasso"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.004098720344979797"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gFg6qWlm_gW9",
        "outputId": "33353b19-4eca-4a3d-c42d-ed8153ee61c9"
      },
      "source": [
        "#Lowest MSE - Ridge\n",
        "MSE_ridge = Err_df[Err_df['Alpha']==ridge_alpha_best]['Ridge'].mean()\n",
        "MSE_ridge"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.004118067661937138"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aOR9euhip4V0"
      },
      "source": [
        "*We see marginally better lowest MSE is offered by Lasso penalty compared to Ridge*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q9O3P8ODqJak"
      },
      "source": [
        "3)(5 pts) Run ridge and lasso regression for all of the α specified above (on training data), and plot the coefficients learned for each of them - there should be one plot each for lasso and ridge, so a total of two plots; different features' weights of each model should be on the same plot with different colors (3pts).\n",
        "\n",
        "What do you qualitatively observe when the value of the regularization parameter changes (2pts)?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XdNwxSwLvcz4"
      },
      "source": [
        "coef_lasso_df = pd.DataFrame(coef_lasso,columns=X.columns)\n",
        "coef_lasso_df['Log Alpha'] = np.log10(np.repeat(alphas,5))\n",
        "\n",
        "coef_ridge_df = pd.DataFrame(coef_ridge,columns=X.columns)\n",
        "coef_ridge_df['Log Alpha'] = np.log10(np.repeat(alphas,5))\n",
        "\n",
        "coef_lasso_df_summ = coef_lasso_df.groupby(['Log Alpha']).mean()\n",
        "coef_ridge_df_summ = coef_ridge_df.groupby(['Log Alpha']).mean()"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 663
        },
        "id": "3ZaeZCBiv6AH",
        "outputId": "f6fda3b3-53cc-40c4-803f-1cc3be5f9aa7"
      },
      "source": [
        "#Lasso Coefficients\n",
        "coef_lasso_df_summ.plot(figsize=(15,10))\n",
        "plt.title('Lasso regression betas')\n",
        "plt.show()"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 663
        },
        "id": "BMlVdJ700Ckf",
        "outputId": "87596535-d0dc-4b6f-ca6a-5b137e1df427"
      },
      "source": [
        "#Lasso Coefficients\n",
        "coef_ridge_df_summ.plot(figsize=(15,10))\n",
        "plt.title('Ridge regression betas')\n",
        "plt.show()"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nDnGJto50N4R"
      },
      "source": [
        "*We see betas tend to decrease with increasing alpha which makes sense given alpha is tweaking the extent lasso or ridge penalty is being applied to the betas.*\n",
        "*For Lasso we see, the co-efficients are coerced to zero in the following order :\n",
        "Research -> SOP -> University Rating -> LOR -> TOEFL -> GRE -> GPA\n",
        "Interestingly we observe in cases such as Research vs SOP, the no-penalty case has greater co-efficient for Research but when penalty is applied to shrink the co-efficients, we see research going to zero before SOP.*\n",
        "\n",
        "*Similarly for Ridge, we see at an overall level, betas are decreasing as alpha increases. In some places however, betas for variables such as SOP, University and TOEFL increase probably because beta for CGPA has decreased quite a lot and overall cost function (with penalty) is getting optimized for such an attribution. Post this as alpha increases, all betas tend towards zero.*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f9-wroc60Ihn"
      },
      "source": [
        "4)(**3 pts**) Take the exponential of Y_train as the target, and fit the 2 regression models again. Report the best chosen **α** based on cross validation as well as the corresponding scoring metric. Compare the results of using the original target with the results of using the exponential of the target. What do you observe? \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "07oxfbF50M7h",
        "outputId": "f3a329f4-1dac-4e99-a799-d94520aaf1b6"
      },
      "source": [
        "# Set number of cross-validation folds and initialize lists to store error metrics and coefficients\n",
        "k = 5\n",
        "kf = KFold(n_splits=k)\n",
        "MSE_Err_list_l1_ey = []\n",
        "MSE_Err_list_l2_ey = []\n",
        "MSE_Err_list_l1_y = []\n",
        "MSE_Err_list_l2_y = []\n",
        "coef_lasso = []\n",
        "coef_ridge = []\n",
        "\n",
        "for i in range(len(alphas)):\n",
        "  \n",
        "  #Initialize ridge and lasso\n",
        "  l1_ey = Lasso(alpha=alphas[i])\n",
        "  l2_ey = Ridge(alpha = alphas[i])\n",
        "\n",
        "  #Get Folds from kfold\n",
        "  for train_ix, val_ix in kf.split(X_scaled):\n",
        "    #Array to list for subsetting dataframes\n",
        "    train_ix = train_ix.tolist()\n",
        "    val_ix = val_ix.tolist()\n",
        "\n",
        "    #CHANGED TARGET from y_train to exp(y_train)\n",
        "    l1_ey.fit(X_scaled[train_ix],np.exp(np.array(y_train))[train_ix])\n",
        "\n",
        "    #Predict Lasso exp y\n",
        "    pred_ey = l1_ey.predict(X_scaled[val_ix])\n",
        "    #Extract prediction of y by taking log\n",
        "    pred_ey_log = np.log(l1_ey.predict(X_scaled[val_ix]))\n",
        "\n",
        "    #MSE of Lasso exp y\n",
        "    MSE = mean_squared_error(np.exp(np.array(y_train))[val_ix],pred_ey)\n",
        "    MSE_Err_list_l1_ey.append(MSE)\n",
        "\n",
        "    #MSE of Lasso y after taking log\n",
        "    MSE_y = mean_squared_error((np.array(y_train))[val_ix],pred_ey_log)\n",
        "    MSE_Err_list_l1_y.append(MSE_y)\n",
        "\n",
        "\n",
        "    l2_ey.fit(X_scaled[train_ix],np.exp(np.array(y_train))[train_ix])\n",
        "\n",
        "    #Extract prediction of exponential y from regression\n",
        "    pred_ey = l2_ey.predict(X_scaled[val_ix])\n",
        "\n",
        "    #Extract prediction of y by taking log\n",
        "    pred_ey_log = np.log(l2_ey.predict(X_scaled[val_ix]))\n",
        "\n",
        "    #MSE for exponential y\n",
        "    MSE = mean_squared_error(np.exp(np.array(y_train))[val_ix],pred_ey)\n",
        "\n",
        "    #MSE for predicted y after taking log\n",
        "    MSE_y = mean_squared_error((np.array(y_train))[val_ix],pred_ey_log)\n",
        "    MSE_Err_list_l2_ey.append(MSE)\n",
        "    MSE_Err_list_l2_y.append(MSE_y)\n",
        "\n",
        "    coef_lasso = coef_lasso + [list(l1_ey.coef_)]\n",
        "    coef_ridge = coef_ridge + [list(l2_ey.coef_)]\n",
        "\n",
        "Err_df_ey = pd.DataFrame([list(np.repeat(alphas,5)),MSE_Err_list_l1_ey,MSE_Err_list_l2_ey,MSE_Err_list_l1_y,MSE_Err_list_l2_y]).rename({0:'Alpha',1:'Lasso',2:'Ridge',3:'Lasso MSE y',4:'Ridge MSE y'}).T\n",
        "\n",
        "#Alpha for min lasso MSE\n",
        "lasso_alpha = Err_df_ey.groupby(['Alpha'])['Lasso'].mean().idxmin()\n",
        "print(\"Least MSE for Lasso availed at alpha = \",lasso_alpha,\"\\n\")\n",
        "\n",
        "#Alpha for min Ridge MSE\n",
        "ridge_alpha = Err_df_ey.groupby(['Alpha'])['Ridge'].mean().idxmin()\n",
        "print(\"Least MSE for Ridge availed at alpha = \",ridge_alpha,\"\\n\")\n",
        "\n",
        "#Lowest MSE - Lasso\n",
        "MSE_lasso_expy = Err_df_ey[Err_df_ey['Alpha']==lasso_alpha]['Lasso'].mean()\n",
        "MSE_lasso_y = Err_df_ey[Err_df_ey['Alpha']==lasso_alpha]['Lasso MSE y'].mean()\n",
        "print(\"Least MSE for Lasso with exponentail y = \",MSE_lasso_expy,\" and for y (log of model output) equals \",MSE_lasso_y ,\"\\ncompared to original MSE of y = \",(MSE_lasso),\"\\n\")\n",
        "\n",
        "#Lowest MSE - Ridge\n",
        "MSE_ridge_expy = Err_df_ey[Err_df_ey['Alpha']==ridge_alpha]['Ridge'].mean()\n",
        "MSE_ridge_y = Err_df_ey[Err_df_ey['Alpha']==ridge_alpha]['Ridge MSE y'].mean()\n",
        "print(\"Least MSE for Lasso with exponential y = \",MSE_ridge_expy,\" and for y (log of model output) equals \",MSE_ridge_y ,\"\\ncompared to original MSE of y = \",(MSE_ridge),\"\\n\")\n",
        "\n"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Least MSE for Lasso availed at alpha =  0.0017073526474706887 \n",
            "\n",
            "Least MSE for Ridge availed at alpha =  6.135907273413163 \n",
            "\n",
            "Least MSE for Lasso with exponentail y =  0.014766582720990703  and for y (log of model output) equals  0.004158840573540436 \n",
            "compared to original MSE of y =  0.004098720344979797 \n",
            "\n",
            "Least MSE for Lasso with exponential y =  0.014815008775351052  and for y (log of model output) equals  0.004178889868271961 \n",
            "compared to original MSE of y =  0.004118067661937138 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rjLllXRg0tBg",
        "outputId": "bacfb800-e6d8-4c6c-8872-e749f7763713"
      },
      "source": [
        "#Compare test set R-sq Lasso\n",
        "print(\"Lasso with target as y has test R-square = \",l1.score(X_test_scaled,y_test))\n",
        "print(\"Lasso with target as exponential y has test R-square = \",l1_ey.score(X_test_scaled,np.exp(y_test)))"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lasso with target as y has test R-square =  0.7273262958018977\n",
            "Lasso with target as exponential y has test R-square =  0.7559096678737042\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i7WGNBOM3Xys",
        "outputId": "fa0c0319-5035-4d45-d62d-08981cc4e801"
      },
      "source": [
        "#Compare test set R-sq Lasso\n",
        "print(\"Ridge with target as y has test R-square = \",l2.score(X_test_scaled,y_test))\n",
        "print(\"Ridge with target as exponential y has test R-square = \",l2_ey.score(X_test_scaled,np.exp(y_test)))"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ridge with target as y has test R-square =  0.727325798783922\n",
            "Ridge with target as exponential y has test R-square =  0.7559095973330394\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CgfhNfOy5_Yp"
      },
      "source": [
        "*We see MSE on prediction of y (log of model output) from Kfold cross validation increases slightly for both Ridge and Lasso.*\n",
        "\n",
        "*In this case we see exponential y model provides a better fit which is seen from test R-square. Also we see regularization parameters increase quite a bit implying higher penalty in case of exponential target variable. However, the predicted y on validation set in KFold shows slightly larger deviation (MSE) with the true values.*\n",
        "\n",
        "*Overall, post exponential transformation of y we avail a more general model with performance improving on test set while validation set MSE increases slightly.*\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LE8a06uw3zMv"
      },
      "source": [
        "5)(5 pts) Similarly, use sklearn.linear_model.ElasticNet to do linear regression with different α values, and plot the coefficients learned for each of them (2pts). Observe the plot, then explain the pros and cons of ridge, lasso and Elastic Net models (3pts)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X2cFbia-30aE"
      },
      "source": [
        "from sklearn.linear_model import ElasticNet\n",
        "# Set number of cross-validation folds and initialize lists to store error metrics and coefficients\n",
        "k = 5\n",
        "kf = KFold(n_splits=k)\n",
        "MSE_Err_list_el = []\n",
        "coef_elasticnet = []\n",
        "\n",
        "\n",
        "for i in range(len(alphas)):\n",
        "  \n",
        "  #Initialize risge and lasso\n",
        "  el = ElasticNet(alpha=alphas[i])\n",
        "\n",
        "  #Get Folds from kfold\n",
        "  for train_ix, val_ix in kf.split(X_scaled):\n",
        "    #Array to list for subsetting dataframes\n",
        "    train_ix = train_ix.tolist()\n",
        "    val_ix = val_ix.tolist()\n",
        "    el.fit(X_scaled[train_ix],np.array(y_train)[train_ix])\n",
        "    pred = el.predict(X_scaled[val_ix])\n",
        "    MSE = mean_squared_error(np.array(y_train)[val_ix],pred)\n",
        "    MSE_Err_list_el.append(MSE)\n",
        "\n",
        "    coef_elasticnet = coef_elasticnet + [list(el.coef_)]\n",
        "\n",
        "coef_elasticnet_df = pd.DataFrame(coef_elasticnet,columns=X.columns)\n",
        "coef_elasticnet_df['Log Alpha'] = np.log10(np.repeat(alphas,5))\n",
        "coef_elasticnet_df_summ = coef_elasticnet_df.groupby(['Log Alpha']).mean()"
      ],
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 663
        },
        "id": "aDUgDhJ030cu",
        "outputId": "55841e76-0c63-4ead-eb74-4a8b3e2bd033"
      },
      "source": [
        "#Elasticnet coefficients\n",
        "coef_elasticnet_df_summ.plot(figsize=(15,10))\n",
        "plt.title('Elasticnet regression betas')\n",
        "plt.show()"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "roUXf3q066U7"
      },
      "source": [
        "*We observe as regularization parameter increases our betas generally decrease. Elastic net offers a trade-off between ridge and lasso hence betas are decreasing bit faster compared to lasso but do converge to zero after some time unlike ridge. The advantage of elasticnet would be we can weigh the penalty we want to provide to both ridge and lasso components of the objective function. For example, a high ridge and low lasso component would slowly coerce variables like research, SOP, university rating to zero wherein we still would have meaningful differences in betas of other parameters since they wouldn't be driven to zero quickly as in lasso.*\n",
        "\n",
        "**Lasso** : *Good for variable selection since it drives 'not-so-useful' co-efficients to zero thereby making a simpler model. However, given few variables are removed, we would have some information loss causing slightly lower accuracy (for example absolute training R-square would be lower for lasso compared to ridge)*\n",
        "\n",
        "**Ridge** : *Ridge is suitable in use-cases where we want to introduce penalty on betas but cannot remove any of the variables. Consider a marketing mix problem, with some multi-collinearity causing normal regression betas to be inflated, however we cannot simply remove a marketing channel from our analysis. We can use Ridge to constrain our betas closer to zero and have a comparative study. On the other hand, Ridge would not necessarily simplify our model with respect to number of variables.*\n",
        "\n",
        "**Elasticnet** : *As mentioned earlier, elasticnet would provide a trade-off between lasso and ridge penalties. We have more control on how we want our betas to be regularized. However, the computational cost for this operation would be higher than both ridge and lasso.*\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pFBr82sy_TpI"
      },
      "source": [
        "6)(**5 pts**) Run the following three regression models with **MSE** loss on the training data: \n",
        "\n",
        "a. linear regression without regularization (1pts)\n",
        "\n",
        "b. linear regression with ridge regularization (2pts)\n",
        "\n",
        "c. linear regression with lasso regularization (2pts)\n",
        "\n",
        "For part (b) and (c), use only the best regularization parameters. Report the MSE and R<sup>2</sup> on the test data for each model."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iFBNKm_A_Z98",
        "outputId": "5a26136e-0b04-4728-e1e2-eb1bb3ced750"
      },
      "source": [
        "lm = LinearRegression()\n",
        "lasso = Lasso(alpha = lasso_alpha_best)\n",
        "ridge = Ridge(alpha = ridge_alpha_best)\n",
        "\n",
        "#Train set - lm\n",
        "lm.fit(X_scaled, y_train)\n",
        "mse = mean_squared_error(y_train, lm.predict(X_scaled))\n",
        "print(\"Train MSE with Linear Regresssion = \", mse,'\\n')\n",
        "print(\"Train R2 with Linear Regression = \", lm.score(X_scaled,y_train),'\\n')\n",
        "\n",
        "lasso.fit(X_scaled, y_train)\n",
        "mse = mean_squared_error(y_train, lasso.predict(X_scaled))\n",
        "print(\"Train MSE with Lasso using alpha = \", lasso_alpha_best, \" is \", mse,' and train R2 = ',lasso.score(X_scaled,y_train),'\\n')\n",
        "\n",
        "ridge.fit(X_scaled, y_train)\n",
        "mse = mean_squared_error(y_train, ridge.predict(X_scaled))\n",
        "print(\"Train MSE with Ridge alpha = \", ridge_alpha_best, \" is \", mse,' and train R2 = ',ridge.score(X_scaled,y_train),'\\n')"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train MSE with Linear Regresssion =  0.0038570690453814307 \n",
            "\n",
            "Train R2 with Linear Regression =  0.8193370700006861 \n",
            "\n",
            "Train MSE with Lasso using alpha =  0.0011768119524349942  is  0.0038592613723896292  and train R2 =  0.819234382645039 \n",
            "\n",
            "Train MSE with Ridge alpha =  4.229242874389499  is  0.0038604684160692317  and train R2 =  0.8191778454025817 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kmyCe555_aBN",
        "outputId": "195286fc-10de-4400-8319-fa345d6834a5"
      },
      "source": [
        "\n",
        "mse = mean_squared_error(y_test, lm.predict(X_test_scaled))\n",
        "print(\"Test MSE with Linear Regresssion = \", mse,'\\n')\n",
        "print(\"Test R2 with Linear Regression = \", lm.score(X_test_scaled,y_test),'\\n')\n",
        "\n",
        "mse = mean_squared_error(y_test, lasso.predict(X_test_scaled))\n",
        "print(\"Test MSE with Lasso using alpha = \", lasso_alpha_best, \" is \", mse,' and Test R2 = ',lasso.score(X_test_scaled,y_test),'\\n')\n",
        "\n",
        "mse = mean_squared_error(y_test, ridge.predict(X_test_scaled))\n",
        "print(\"Test MSE with Ridge alpha = \", ridge_alpha_best, \" is \", mse,' and Test R2 = ',ridge.score(X_test_scaled,y_test),'\\n')"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test MSE with Linear Regresssion =  0.004526319242200029 \n",
            "\n",
            "Test R2 with Linear Regression =  0.7310684763186412 \n",
            "\n",
            "Test MSE with Lasso using alpha =  0.0011768119524349942  is  0.0045180776329531965  and Test R2 =  0.7315581520162086 \n",
            "\n",
            "Test MSE with Ridge alpha =  4.229242874389499  is  0.004500839482117701  and Test R2 =  0.732582357760783 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wLHhNYVvEwKB"
      },
      "source": [
        "*Best train and test R-squared values are for Ridge regularized model*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pKq1KERxJw9y"
      },
      "source": [
        "\n",
        "\n",
        "\n",
        "\n",
        "7)(**5 pts**) Train the 3 models and report the metrics with the original data without scaling (3pts). \n",
        "\n",
        "Why do we need to scale the data before regularization (2pts)? \n",
        "\n",
        "## Answer:\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5DX4Il9JE4fi",
        "outputId": "ca18dff7-2a1b-4c77-c5c0-519dace774c5"
      },
      "source": [
        "lm = LinearRegression()\n",
        "lasso = Lasso(alpha = lasso_alpha_best)\n",
        "ridge = Ridge(alpha = ridge_alpha_best)\n",
        "\n",
        "#Train set - lm\n",
        "lm.fit(X_train, y_train)\n",
        "mse = mean_squared_error(y_train, lm.predict(X_train))\n",
        "print(\"Train MSE with Linear Regresssion = \", mse,'\\n')\n",
        "print(\"Train R2 with Linear Regression = \", lm.score(X_train,y_train),'\\n')\n",
        "\n",
        "lasso.fit(X_train, y_train)\n",
        "mse = mean_squared_error(y_train, lasso.predict(X_train))\n",
        "print(\"Train MSE with Lasso using alpha = \", lasso_alpha_best, \" is \", mse,' and train R2 = ',lasso.score(X_train,y_train),'\\n')\n",
        "\n",
        "ridge.fit(X_train, y_train)\n",
        "mse = mean_squared_error(y_train, ridge.predict(X_train))\n",
        "print(\"Train MSE with Ridge using alpha = \", ridge_alpha_best, \" is \", mse,' and train R2 = ',ridge.score(X_train,y_train),'\\n')\n",
        "\n",
        "#----------------\n",
        "\n",
        "mse = mean_squared_error(y_test, lm.predict(X_test))\n",
        "print(\"Test MSE with Linear Regresssion = \", mse,'\\n')\n",
        "print(\"Test R2 with Linear Regression = \", lm.score(X_test,y_test),'\\n')\n",
        "\n",
        "mse = mean_squared_error(y_test, lasso.predict(X_test))\n",
        "print(\"Test MSE with Lasso using alpha = \", lasso_alpha_best, \" is \", mse,' and Test R2 = ',lasso.score(X_test,y_test),'\\n')\n",
        "\n",
        "mse = mean_squared_error(y_test, ridge.predict(X_test))\n",
        "print(\"Test MSE with Ridge using alpha = \", ridge_alpha_best, \" is \", mse,' and Test R2 = ',ridge.score(X_test,y_test),'\\n')"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train MSE with Linear Regresssion =  0.0038570690453814302 \n",
            "\n",
            "Train R2 with Linear Regression =  0.8193370700006861 \n",
            "\n",
            "Train MSE with Lasso using alpha =  0.0011768119524349942  is  0.003876595549447665  and train R2 =  0.8184224596072129 \n",
            "\n",
            "Train MSE with Ridge using alpha =  4.229242874389499  is  0.003885971136801933  and train R2 =  0.8179833124045164 \n",
            "\n",
            "Test MSE with Linear Regresssion =  0.004526319242200032 \n",
            "\n",
            "Test R2 with Linear Regression =  0.731068476318641 \n",
            "\n",
            "Test MSE with Lasso using alpha =  0.0011768119524349942  is  0.004588797184954842  and Test R2 =  0.7273563456794948 \n",
            "\n",
            "Test MSE with Ridge using alpha =  4.229242874389499  is  0.004518216577828436  and Test R2 =  0.7315498965982836 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c0MGS0u7HsLj"
      },
      "source": [
        "*We see above test R-2 decreases slightly as compared to model based on scaled data.*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lly1cyHIIM0N"
      },
      "source": [
        "**Advantages of scaling prior to regularization** : <br>\n",
        "\n",
        "1.*Given regularization components introduce either a sum of absolute betas or sum of square of betas in the objective function, it becomes important to make sure that betas are additive. Without scaling, we'd have betas having different units and it wouldn't make sense to add them. Say we have weight regressed with height. If we consider two cases where covariate is height in meters vs centimeters, we'd have higher beta associated with variable 'height in meters'. When using regularization we'll be penalizing the beta for height in meters variable more than if the variable would have been in centimeters. Similarly if my covariates $x_1,x_2,x_3..$ are in different units, regularizing non-additive betas may lead to penalizing only one of the betas more than the others.*\n",
        "\n",
        "*Additionally scaling helps with model interpretation given betas become comparable.*"
      ]
    }
  ]
}
